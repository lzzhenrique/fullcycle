<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="02fa5224-4846-4b19-a5de-c7fd9ac4114c" name="Changes" comment="">
      <change afterPath="$PROJECT_DIR$/src/domain/@shared/entity/entity.abstract.ts" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/domain/@shared/notification/notification.error.ts" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/domain/@shared/notification/notification.spec.ts" afterDir="false" />
      <change afterPath="$PROJECT_DIR$/src/domain/@shared/notification/notification.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/dist/tsconfig.tsbuildinfo" beforeDir="false" afterPath="$PROJECT_DIR$/dist/tsconfig.tsbuildinfo" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/domain/customer/entity/customer.spec.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/domain/customer/entity/customer.spec.ts" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/src/domain/customer/entity/customer.ts" beforeDir="false" afterPath="$PROJECT_DIR$/src/domain/customer/entity/customer.ts" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="TypeScript File" />
      </list>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$/.." />
  </component>
  <component name="GitHubPullRequestSearchHistory">{
  &quot;lastFilter&quot;: {
    &quot;state&quot;: &quot;OPEN&quot;,
    &quot;assignee&quot;: &quot;lzzhenrique&quot;
  }
}</component>
  <component name="GithubPullRequestsUISettings">{
  &quot;selectedUrlAndAccountId&quot;: {
    &quot;url&quot;: &quot;https://github.com/codeedu/fc2-arquitetura-hexagonal.git&quot;,
    &quot;accountId&quot;: &quot;005247a7-ab6b-4cfd-ae86-2fbb7f053692&quot;
  }
}</component>
  <component name="ProblemsViewState">
    <option name="selectedTabId" value="CurrentFile" />
  </component>
  <component name="ProjectColorInfo">{
  &quot;associatedIndex&quot;: 7
}</component>
  <component name="ProjectId" id="2juthLfbrKN3fIzedim1JPPZar3" />
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent">{
  &quot;keyToString&quot;: {
    &quot;Jest.Customer unit tests.should throw error when id is empty.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Customer unit tests.should throw error when name is empty.executor&quot;: &quot;Run&quot;,
    &quot;Jest.E2E test for customer.executor&quot;: &quot;Run&quot;,
    &quot;Jest.E2E test for customer.should be list customers.executor&quot;: &quot;Run&quot;,
    &quot;Jest.E2E test for customer.should list customers.executor&quot;: &quot;Run&quot;,
    &quot;Jest.E2E test for customer.should not create a customer.executor&quot;: &quot;Run&quot;,
    &quot;Jest.E2E test for product.executor&quot;: &quot;Run&quot;,
    &quot;Jest.E2E test for product.should be able to create a product.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Integration test for update product.should update a product.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Test create product use case.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Test create product use case.should NOT create a product when the name is not defined.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Test create product use case.should NOT create a product when the price is below 0.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Test create product use case.should NOT create a product when the type is not supported by the factory .executor&quot;: &quot;Run&quot;,
    &quot;Jest.Test create product use case.should create a product.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Test find a product usecase.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Test find a product usecase.should NOT find a product.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Test find a product usecase.should find a product.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Test find all customers use case.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Test find all customers use case.should find all customers.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Test find customer use case.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Test find customer use case.should NOT find a customer .executor&quot;: &quot;Run&quot;,
    &quot;Jest.Test find customer use case.should find a customer  (1).executor&quot;: &quot;Debug&quot;,
    &quot;Jest.Test find customer use case.should find a customer .executor&quot;: &quot;Run&quot;,
    &quot;Jest.Test list product usecase.should find a products.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Test list products.should find all products.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Unit test create a product.should NOT create a product .executor&quot;: &quot;Run&quot;,
    &quot;Jest.Unit test create a product.should NOT create a product when the name is not defined.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Unit test create a product.should NOT create a product when the price is below 0 .executor&quot;: &quot;Run&quot;,
    &quot;Jest.Unit test create a product.should create a customer .executor&quot;: &quot;Run&quot;,
    &quot;Jest.Unit test create customer.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Unit test create customer.should NOT create a customer.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Unit test create customer.should create a customer.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Unit test find a product.should find a product by his ID.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Unit test for customer update.should update a customer.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Unit test for update product.should update a product.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Unit tests for notification.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Unit tests for notification.should check if notification has some error.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Unit tests for notification.should create errors.executor&quot;: &quot;Run&quot;,
    &quot;Jest.Unit tests for notification.should get all errors props.executor&quot;: &quot;Run&quot;,
    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
    &quot;git-widget-placeholder&quot;: &quot;fc-clean-architecture&quot;,
    &quot;last_opened_file_path&quot;: &quot;/home/luiz-henrique/Studies/fullcycle/fc-clean-architecture/src/infrastructure/api/__tests__&quot;,
    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
    &quot;nodejs.jest.jest_package&quot;: &quot;/home/luiz-henrique/Studies/fullcycle/fc-clean-architecture/node_modules/jest&quot;,
    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.keymap&quot;,
    &quot;ts.external.directory.path&quot;: &quot;/home/luiz-henrique/Studies/fullcycle/fc-clean-architecture/node_modules/typescript/lib&quot;,
    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
  }
}</component>
  <component name="RecentsManager">
    <key name="CopyFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/src/infrastructure/api/__tests__" />
      <recent name="$PROJECT_DIR$/src/infrastructure/api/routes" />
      <recent name="$PROJECT_DIR$/src/usecase/product/list" />
      <recent name="$PROJECT_DIR$/src/usecase" />
      <recent name="$PROJECT_DIR$/src/usecase/customer" />
    </key>
    <key name="MoveFile.RECENT_KEYS">
      <recent name="$PROJECT_DIR$/src" />
    </key>
  </component>
  <component name="RunManager" selected="Jest.Customer unit tests.should throw error when name is empty">
    <configuration name="Customer unit tests.should throw error when id is empty" type="JavaScriptTestRunnerJest" temporary="true" nameIsGenerated="true">
      <node-interpreter value="project" />
      <jest-package value="$PROJECT_DIR$/node_modules/jest" />
      <working-dir value="$PROJECT_DIR$" />
      <envs />
      <scope-kind value="TEST" />
      <test-file value="$PROJECT_DIR$/src/domain/customer/entity/customer.spec.ts" />
      <test-names>
        <test-name value="Customer unit tests" />
        <test-name value="should throw error when id is empty" />
      </test-names>
      <method v="2" />
    </configuration>
    <configuration name="Customer unit tests.should throw error when name is empty" type="JavaScriptTestRunnerJest" temporary="true" nameIsGenerated="true">
      <node-interpreter value="project" />
      <jest-package value="$PROJECT_DIR$/node_modules/jest" />
      <working-dir value="$PROJECT_DIR$" />
      <envs />
      <scope-kind value="TEST" />
      <test-file value="$PROJECT_DIR$/src/domain/customer/entity/customer.spec.ts" />
      <test-names>
        <test-name value="Customer unit tests" />
        <test-name value="should throw error when name is empty" />
      </test-names>
      <method v="2" />
    </configuration>
    <configuration name="Unit tests for notification" type="JavaScriptTestRunnerJest" temporary="true" nameIsGenerated="true">
      <node-interpreter value="project" />
      <jest-package value="$PROJECT_DIR$/node_modules/jest" />
      <working-dir value="$PROJECT_DIR$" />
      <envs />
      <scope-kind value="SUITE" />
      <test-file value="$PROJECT_DIR$/src/domain/@shared/notification/notification.spec.ts" />
      <test-names>
        <test-name value="Unit tests for notification" />
      </test-names>
      <method v="2" />
    </configuration>
    <configuration name="Unit tests for notification.should check if notification has some error" type="JavaScriptTestRunnerJest" temporary="true" nameIsGenerated="true">
      <node-interpreter value="project" />
      <jest-package value="$PROJECT_DIR$/node_modules/jest" />
      <working-dir value="$PROJECT_DIR$" />
      <envs />
      <scope-kind value="TEST" />
      <test-file value="$PROJECT_DIR$/src/domain/@shared/notification/notification.spec.ts" />
      <test-names>
        <test-name value="Unit tests for notification" />
        <test-name value="should check if notification has some error" />
      </test-names>
      <method v="2" />
    </configuration>
    <configuration name="Unit tests for notification.should get all errors props" type="JavaScriptTestRunnerJest" temporary="true" nameIsGenerated="true">
      <node-interpreter value="project" />
      <jest-package value="$PROJECT_DIR$/node_modules/jest" />
      <working-dir value="$PROJECT_DIR$" />
      <envs />
      <scope-kind value="TEST" />
      <test-file value="$PROJECT_DIR$/src/domain/@shared/notification/notification.spec.ts" />
      <test-names>
        <test-name value="Unit tests for notification" />
        <test-name value="should get all errors props" />
      </test-names>
      <method v="2" />
    </configuration>
    <recent_temporary>
      <list>
        <item itemvalue="Jest.Customer unit tests.should throw error when name is empty" />
        <item itemvalue="Jest.Customer unit tests.should throw error when id is empty" />
        <item itemvalue="Jest.Unit tests for notification" />
        <item itemvalue="Jest.Unit tests for notification.should get all errors props" />
        <item itemvalue="Jest.Unit tests for notification.should check if notification has some error" />
      </list>
    </recent_temporary>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-js-predefined-1d06a55b98c1-0b3e54e931b4-JavaScript-WS-241.17890.13" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="02fa5224-4846-4b19-a5de-c7fd9ac4114c" name="Changes" comment="" />
      <created>1722248908450</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1722248908450</updated>
      <workItem from="1722248910227" duration="4610000" />
      <workItem from="1722595927184" duration="4025000" />
      <workItem from="1722642169914" duration="4656000" />
      <workItem from="1722876880640" duration="6944000" />
      <workItem from="1722883834664" duration="1483000" />
      <workItem from="1722942165159" duration="3634000" />
      <workItem from="1723026879444" duration="3748000" />
      <workItem from="1723063883957" duration="25000" />
    </task>
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
</project>